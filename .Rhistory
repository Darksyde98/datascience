str(newdf)
?count
?count.fields
doc <- unique(newdf$doc)
for (i in doc) {
cdoc <- newdf$doc == i
sum(cdoc)
}
sum(cdoc)
cdoc <- newdf$doc == doc
sum(cdoc)
head(doc)
doc2 <- as.list(doc)
head(doc)
head(doc2)
remove(doc2)
remove(cdoc)
remove(i)
remove(doc)
doc <- newdf$doc
head(doc)
plot(doc, newdf$tag)
plot(doc)
df <- read.table("Tag-Document.csv", header = TRUE, sep = ",")
df$doc <- as.character(df$doc)
s <- strsplit(df$doc, split = ',')
newdf <- data.frame(tag = rep(df$tag, sapply(s, length)), doc = unlist(s))
test <- strsplit(newdf$doc, "-")
s
test <- strsplit(s, "-")
test <- strsplit(df$doc, "-")
head(test)
testdf <- data.frame(test)
?data.frame
str(test)
type(test)
View(test)
View(test)
View(newdf)
newdf$doc <- as.character(newdf$doc)
test <- strsplit(newdf$doc, "-")
head(test)
colnames(test, c("proj", "orig", "disc", "type", "seq", "sheet"))
test2 <- data.frame(test2)
test2 <- data.frame(test)
test2 <- data.frame(test, row.names = c("proj", "orig", "disc", "type", "seq", "sheet"))
library(data.table)
library(tidyr)
t1 <- with(test, table(test))
rbind.fill(lapply(test, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
install.packages("plyr")
library(plyr)
rbind.fill(lapply(test, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
p <- rbind.fill(lapply(test, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
?cbind.data.frame
r <- rbind(test)
head(r)
r
r <- rbind(test, deparse.level = 1)
r
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5,] ; X$var2[c1,3]) = NA
X <- X[sample(1:5),] ; X$var2[c1,3]) = NA
X <- X[sample(1:5),] ; X$var2[c1,3]) = NA
X <- X[sample(1:5),] ; X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2, "var2"]
X[(X$var1 <= 3 & X$var3 >11),]
X[order(X$var1),]
library(plyr)
arrange(X, var1)
arrange(X, desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X, rnorm(5))
Y
df <- read.table("Tag-Document.csv", header = TRUE, sep = ",")
df$doc <- as.character(df$doc)
s <- strsplit(df$doc, split = ',')
newdf <- data.frame(tag = rep(df$tag, sapply(s, length)), doc = unlist(s))
table(newdf$tag, newdf$doc)
tagdoc <- table(newdf$tag, newdf$doc)
head(tagdoc, n=10)
xt <- xtabs(tag ~ doc, data=newdf)
xt <- xtabs(tag ~ doc, data=newdf, na.rm=FALSE)
newdf2 <- ftable(newdf)
head(newdf2)
View(newdf)
split <- strsplit(newdf$doc, "-")
split <- strsplit(as.character(newdf$doc), "-")
View(split)
install.packages("reshape2")
library(reshape2)
dcast(newdf, tag ~ doc)
test2 <- dcast(newdf, tag ~ doc)
View(test2)
spl <- split(newdf$doc, newdf$tag)
splcount <- lapply(spl, count)
View(splcount)
unlist(splcount)
new2 <- unlist(splcount)
library(swirl)
rm(list=ls())
library(dplyr)
df <- read.table("Tag-Document.csv", header = TRUE, sep = ",")
df$doc <- as.character(df$doc)
s <- strsplit(df$doc, split = ',')
newdf <- data.frame(tag = rep(df$tag, sapply(s, length)), doc = unlist(s))
str(newdf)
names(newdf)
test <- filter(newdf, tag == "20H01")
View(test)
test <- filter(newdf, tag == "63")
test <- filter(newdf, tag == "63*")
test <- filter(newdf, tag == 63*)
test2 <- mutate(newdf, c("proj", "orig", "disc", "type", "seq", "sheet"), strsplit(doc, "-"))
test2 <- mutate(newdf, splt, strsplit(doc, "-"))
doc <- newdf$doc
head(doc)
doc <- as.list(doc)
head(doc)
View(doc)
doc <- newdf$doc
doc <- as.character(doc)
doc <- as.list(doc)
View(doc)
doc <- unique(doc)
docspl <- strsplit(doc, "-")
rm(list=ls())
df <- read.csv("data.csv")
View(df)
library(jpeg)
library(data.table)
library(dplyr)
library(Hmisc)
agricultureLogical <- df$ACR == 3 & df$AGS == 6
head(which(agricultureLogical), 3)
data2 <- readJPEg(jeff, native = TRUE)
data2 <- readJPEG(jeff, native = TRUE)
data2 <- readJPEG("jeff", native = TRUE)
data(iris)
library(ggplot2)
qplot(Petal.Width, Sepal.Width, colour=species, data=iris)
qplot(Petal.Width, Sepal.Width, colour="species", data=iris)
qplot(Petal.Width, Sepal.Width, colour=Species, data=iris)
set.seed(12345)
c0 <- 0.04
c <- seq(c0, 0.24, 0.01)
s0 <- 0.09
s <- seq(s0, 0.29, 0.01)
w0 <- 0.18
w <- seq(w0, 0.38, 0.01)
emp <- 1:10000
days <- 1:260
wage <- round(runif(10000, 25, 41), 0)
hours <- round(runif(10000, 6, 9.5), 2)
df <- cbind(emp, sample(c, replace = TRUE), sample(s, replace = TRUE), sample(w, replace = TRUE))
colnames(df) <- c("employee", "colaborate", "search", "write")
df1 <- data.frame(df)
df1$work <- 1 - df1$colab - df1$search - df1$write
df1$wage <- wage
df1$avg.hrs <- hours
df1$col.hrs <- df1$colaborate * df1$avg.hrs
df1$sea.hrs <- df1$search * df1$avg.hrs
df1$wri.hrs <- df1$write * df1$avg.hrs
df1$wor.hrs <- df1$work * df1$avg.hrs
df1$cost <- df1$wage * df1$avg.hrs
df1$col.cst <- df1$col.hrs * df1$wage
df1$sea.cst <- df1$sea.hrs * df1$wage
df1$wri.cst <- df1$wri.hrs * df1$wage
df1$wor.cst <- df1$wor.hrs * df1$wage
cost <- data.frame(df1$col.cst, df1$sea.cst, df1$wri.cst, df1$wor.cst)
summary(cost)
boxplot(cost)
View(df1)
value <- data.frame(df1$colaborate, df1$search, df1$write, df1$work)
boxplot(value)
summary(value)
mean(value)
mean(value@colaborate)
mean(value$colaborate)
head(value)
mean(df1$colaborate)
mean(df1$search)
test <- c(df1$colaborate, df1$search, df1$write, df1$work)
test
test <- c(mean(df1$colaborate), mean(df1$search), mean(df1$write), mean(df1$work))
test
g <- ggplot(test, aes(x="", y=value, fill=group))
library(ggplot2)
g <- ggplot(test, aes(x="", y=value, fill=group))
str(test)
test <- data.frame(test)
test
g <- ggplot(test, aes(x="", y=value, fill=group))
g
g <- ggplot(data = test, aes(x = factor(1), fill = test)) + geom_bar(width = 1)
g
g <- ggplot(data = test, aes(x = factor(1), fill = factor(test))) + geom_bar(width = 1)
g
g <- bar + coord_polar(theta = "y")
g1 <- g + coord_polar(theta = "y")
g1
g <- ggplot(data = test, aes(x = factor(1), fill = factor(test$test))) + geom_bar(width = 1)
g1
library(plotly)
p <- plot_ly(test, labels = ~test, values = ~test, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
test <- data.frame(c(mean(df1$colaborate) * 50%, mean(df1$search) * 50%, mean(df1$write) *50%, 1-(mean(df1$colaborate) * 50%, mean(df1$search) * 50%, mean(df1$write) *50%))))
test <- data.frame(c(mean(df1$colaborate) * 50%, mean(df1$search) * 50%, mean(df1$write) *50%, (1-(mean(df1$colaborate) * 50%, mean(df1$search) * 50%, mean(df1$write) *50%)
test
test$test2 <- test$test * 50%
test$test2 <- test[,1] * 50%
test$test2 <- test[1,] * 0.5
test
test$test2 <- test[,1] * 0.5
test
test$test2[,4] <- 1 sum (test[1,1:3])
test$test2[,4] <- 1 - (sum(test[1,1:3]))
test$test2[,4] <- 1 - (sum(test[1:3,1]))
test$test2[,4] <- 1 - (sum(test[2, 1:3]))
test$test2[,4] <- 1 - (sum(test[, 1:3]))
test$test2[,4] <- 1 - (sum(test[1:3, 2]))
test[1:3, 2]
sum(test[1:3, 2])
1 - sum(test[1:3, 2])
test[2,4]
test
test[4,2]
test[4,2] <- 1 - sum(test[1:3, 2])
test
p <- plot_ly(test, labels = ~test2, values = ~test2, type = 'pie') %>%
+ layout(title = 'United States Personal Expenditures by Categories in 1960',
+        xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
+        yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(test, labels = ~test2, values = ~test2, type = 'pie') %>%
+ layout(title = 'United States Personal Expenditures by Categories in 1960',
+        xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
+        yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(test, labels = ~test2, values = ~test2, type = 'pie') %>%
p <- + layout(title = 'United States Personal Expenditures by Categories in 1960',
p <- + xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
p <- + yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(test, labels = ~test2, values = ~test2, type = 'pie') %>%
p <- plot_ly(test, labels = ~test2, values = ~test2, type = 'pie')
p <- + layout(title = 'United States Personal Expenditures by Categories in 1960')
p <- plot_ly(test, labels = ~test, values = ~test, type = 'pie') %>%
+ layout(title = 'United States Personal Expenditures by Categories in 1960',
+        xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
+        yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(test, labels = ~test, values = ~test, type = 'pie') %>%
+ layout(title = 'United States Personal Expenditures by Categories in 1960',
+        xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
+        yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(test, labels = ~test, values = ~test, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(test, labels = ~test, values = ~test, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(test, labels = ~test2, values = ~test2, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
test3 <- test[,1] * 0.2
test[4,3] <- 1 - sum(test[1:3, 3])
test
test <- data.frame(c(mean(df1$colaborate), mean(df1$search), mean(df1$write), mean(df1$work)))
test2 <- test[,1] * 0.1
test[4,2] <- 1 - sum(test[1:3, 2])
test
test <- data.frame(c(mean(df1$colaborate), mean(df1$search), mean(df1$write), mean(df1$work)))
test
test <- c(mean(df1$colaborate), mean(df1$search), mean(df1$write), mean(df1$work))
test
test <- data.frame(test)
test2 <- test[,1] * 0.1
test[4,2] <- 1 - sum(test[1:3, 2])
test3 <- test[,1] * 0.2
test[4,3] <- 1 - sum(test[1:3, 3])
test
test2
test <- data.frame(test)
test$test2 <- test[,1] * 0.9
test[4,2] <- 1 - sum(test[1:3, 2])
test$test3 <- test[,1] * 0.75
test[4,3] <- 1 - sum(test[1:3, 3])
test
test[4,2] <- 1 - sum(test[1:3, 2])
test
sum(test[1:3, 2])
test <- c(mean(df1$colaborate), mean(df1$search), mean(df1$write), mean(df1$work))
test <- data.frame(test)
test$test2 <- test[,1] * 0.9
test[4,2] <- 1 - sum(test[1:3, 2])
test$test3 <- test[,1] * 0.75
test[4,3] <- 1 - sum(test[1:3, 3])
test
p <- plot_ly(test, labels = ~test2, values = ~test2, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
p <- plot_ly(test, labels = ~test2, values = ~test2) %>%
add_pie(hole = 0.6) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
test2
test3
test
row.names(test) <- c("Colaborate", "Search", "Write", "Work")
test
p <- plot_ly(test, labels = ~test2, values = ~test2) %>%
add_pie(hole = 0.6) %>%
layout(title = 'Breakdown of work',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
rownames(test)
p <- plot_ly(test, labels = rownames(test), values = ~test2) %>%
add_pie(hole = 0.6) %>%
layout(title = 'Breakdown of work',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
p <- plot_ly(test, labels = ~test2, values = ~test2) %>%
add_pie(hole = 0.6) %>%
legend = rownames(test)
p <- plot_ly(test, labels = ~test2, values = ~test2) %>%
add_pie(hole = 0.6) %>%
layout(title = 'Breakdown of Work', showlegend = TRUE,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
test[1,1]
p <- plot_ly(test, labels = ~test2, values = ~test2) %>%
add_pie(hole = 0.6) %>%
layout(title = 'Breakdown of Work', legend = rownames(test), showlegend = TRUE,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
test$names <- c("Colaborate", "Search", "Write", "Work")
test
p <- plot_ly(test, labels = ~names, values = ~test2) %>%
add_pie(hole = 0.6) %>%
layout(title = 'Breakdown of Work', showlegend = TRUE,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
library(downloader)
library(plyr);
library(dplyr)
library(knitr)
library(tm)
library(stringi)
library(RWeka)
library(ggplot2)
library(slam)
options(mc.cores=1)
setwd("D:/R Code/datasciencecapstone")
## Step 1: Download the dataset and unzip folder
## Check if directory already exists?
if(!file.exists("./projectData")){
dir.create("./projectData")
}
Url <- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
## Check if zip has already been downloaded in projectData directory?
if(!file.exists("./projectData/Coursera-SwiftKey.zip")){
download.file(Url,destfile="./projectData/Coursera-SwiftKey.zip",mode = "wb")
}
## Check if zip has already been unzipped?
if(!file.exists("./projectData/final")){
unzip(zipfile="./projectData/Coursera-SwiftKey.zip",exdir="./projectData")
}
# Once the dataset is downloaded start reading it as this a huge dataset so we'll read line by line only the amount of data needed before doing that lets first list all the files in the directory
path <- file.path("./projectData/final" , "en_US")
files<-list.files(path, recursive=TRUE)
# Lets make a file connection of the twitter data set
con <- file("./projectData/final/en_US/en_US.twitter.txt", "r")
#lineTwitter<-readLines(con,encoding = "UTF-8", skipNul = TRUE)
lineTwitter<-readLines(con, skipNul = TRUE)
# Close the connection handle when you are done
close(con)
# Lets make a file connection of the blog data set
con <- file("./projectData/final/en_US/en_US.blogs.txt", "r")
#lineBlogs<-readLines(con,encoding = "UTF-8", skipNul = TRUE)
lineBlogs<-readLines(con, skipNul = TRUE)
# Close the connection handle when you are done
close(con)
# Lets make a file connection of the news data set
con <- file("./projectData/final/en_US/en_US.news.txt", "r")
#lineNews<-readLines(con,encoding = "UTF-8", skipNul = TRUE)
lineNews<-readLines(con, skipNul = TRUE)
# Close the connection handle when you are done
close(con)
# Get file sizes
lineBlogs.size <- file.info("./projectData/final/en_US/en_US.blogs.txt")$size / 1024 ^ 2
lineNews.size <- file.info("./projectData/final/en_US/en_US.news.txt")$size / 1024 ^ 2
lineTwitter.size <- file.info("./projectData/final/en_US/en_US.twitter.txt")$size / 1024 ^ 2
# Get words in files
lineBlogs.words <- stri_count_words(lineBlogs)
lineNews.words <- stri_count_words(lineNews)
lineTwitter.words <- stri_count_words(lineTwitter)
# Summary of the data sets
data.frame(source = c("blogs", "news", "twitter"),
file.size.MB = c(lineBlogs.size, lineNews.size, lineTwitter.size),
num.lines = c(length(lineBlogs), length(lineNews), length(lineTwitter)),
num.words = c(sum(lineBlogs.words), sum(lineNews.words), sum(lineTwitter.words)),
mean.num.words = c(mean(lineBlogs.words), mean(lineNews.words), mean(lineTwitter.words)))
## Cleaning The Data
# Sample the data
set.seed(5000)
data.sample <- c(sample(lineBlogs, length(lineBlogs) * 0.02),
sample(lineNews, length(lineNews) * 0.02),
sample(lineTwitter, length(lineTwitter) * 0.02))
# Create corpus and clean the data
corpus <- VCorpus(VectorSource(data.sample))
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
corpus <- tm_map(corpus, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
corpus <- tm_map(corpus, toSpace, "@[^\\s]+")
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
unicorpus <- tm_map(corpus, removeWords, stopwords("en"))
##Exploratory Analysis
# we'll get the frequencies of the word
getFreq <- function(tdm) {
freq <- sort(rowSums(as.matrix(tdm)), decreasing = TRUE)
return(data.frame(word = names(freq), freq = freq))
}
# Prepare n-gram frequencies
getFreq <- function(tdm) {
freq <- sort(rowSums(as.matrix(rollup(tdm, 2, FUN = sum)), na.rm = T), decreasing = TRUE)
return(data.frame(word = names(freq), freq = freq))
}
bigram <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
trigram <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
quadgram <- function(x) NGramTokenizer(x, Weka_control(min = 4, max = 4))
pentagram <- function(x) NGramTokenizer(x, Weka_control(min = 5, max = 5))
hexagram <- function(x) NGramTokenizer(x, Weka_control(min = 6, max = 6))
# Get frequencies of most common n-grams in data sample
freq1 <- getFreq(removeSparseTerms(TermDocumentMatrix(unicorpus), 0.999))
save(freq1, file="nfreq.f1.RData")
freq2 <- getFreq(TermDocumentMatrix(unicorpus, control = list(tokenize = bigram, bounds = list(global = c(5, Inf)))))
save(freq2, file="nfreq.f2.RData")
freq3 <- getFreq(TermDocumentMatrix(corpus, control = list(tokenize = trigram, bounds = list(global = c(3, Inf)))))
save(freq3, file="nfreq.f3.RData")
freq4 <- getFreq(TermDocumentMatrix(corpus, control = list(tokenize = quadgram, bounds = list(global = c(2, Inf)))))
save(freq4, file="nfreq.f4.RData")
freq5 <- getFreq(TermDocumentMatrix(corpus, control = list(tokenize = pentagram, bounds = list(global = c(2, Inf)))))
save(freq5, file="nfreq.f5.RData")
freq6 <- getFreq(TermDocumentMatrix(corpus, control = list(tokenize = hexagram, bounds = list(global = c(2, Inf)))))
save(freq6, file="nfreq.f6.RData")
nf <- list("f1" = freq1, "f2" = freq2, "f3" = freq3, "f4" = freq4, "f5" = freq5, "f6" = freq6)
save(nf, file="nfreq.v5.RData")
View(nf)
install.packages("downloader")
library(data.table)
library(DT)
df <- data.frame(source = c("blogs", "news", "twitter"),
file.size.MB = c(lineBlogs.size, lineNews.size, lineTwitter.size),
num.lines = c(length(lineBlogs), length(lineNews), length(lineTwitter)),
num.words = c(sum(lineBlogs.words), sum(lineNews.words), sum(lineTwitter.words)),
mean.num.words = c(mean(lineBlogs.words), mean(lineNews.words), mean(lineTwitter.words)))
df
datatable(df)
df <- data.frame(source = c("blogs", "news", "twitter"),
Size(MB) = c(lineBlogs.size, lineNews.size, lineTwitter.size),
df <- data.frame(source = c("blogs", "news", "twitter"),
Size(MB) <- c(lineBlogs.size, lineNews.size, lineTwitter.size),
Lines <- round(c(length(lineBlogs), length(lineNews), length(lineTwitter)), 2),
Words <- round(c(sum(lineBlogs.words), sum(lineNews.words), sum(lineTwitter.words)),2),
Mean <- round(c(mean(lineBlogs.words), mean(lineNews.words), mean(lineTwitter.words))),2)
df <- data.frame(source = c("blogs", "news", "twitter"),
Size <- c(lineBlogs.size, lineNews.size, lineTwitter.size),
Lines <- round(c(length(lineBlogs), length(lineNews), length(lineTwitter)), 2),
Words <- round(c(sum(lineBlogs.words), sum(lineNews.words), sum(lineTwitter.words)),2),
Mean <- round(c(mean(lineBlogs.words), mean(lineNews.words), mean(lineTwitter.words))),2)
df
df <- data.frame(source = c("blogs", "news", "twitter"),
Size = c(lineBlogs.size, lineNews.size, lineTwitter.size),
Lines = c(length(lineBlogs), length(lineNews), length(lineTwitter)),
Words = c(sum(lineBlogs.words), sum(lineNews.words), sum(lineTwitter.words)),
Mean = c(mean(lineBlogs.words), mean(lineNews.words), mean(lineTwitter.words)))
df
df <- data.frame(source = c("blogs", "news", "twitter"),
Size = c(round(lineBlogs.size,2), round(lineNews.size,2), round(lineTwitter.size),2),
Lines = c(length(lineBlogs), length(lineNews), length(lineTwitter)),
Words = c(sum(lineBlogs.words), sum(lineNews.words), sum(lineTwitter.words)),
Mean = c(mean(lineBlogs.words), mean(lineNews.words), mean(lineTwitter.words)))
datatable(df)
datatable(df) %>% formatRound('Size', 2)
datatable(df) %>% formatRound(c('Size', 'Mean'), 2)
setwd("D:/R Code/datascience")
